@model TutorConnect.WebApp.Models.BookingViewModel
@{
    ViewData["Title"] = "Book Session with " + ViewBag.Tutor.Name;
    var tutor = ViewBag.Tutor as TutorConnect.WebApp.Models.TutorDTO;
}

<div class="container mt-4">
    <div class="row">
        <!-- Tutor Details Card -->
        <div class="col-md-4 mb-4">
            <div class="card border-0 shadow-sm">
                <div style="height: 8px; background: linear-gradient(90deg, #42E695, #3BB2B8);"></div>
                <div class="card-body text-center">
                    <img src="@tutor.ProfileImageUrl" alt="Tutor" class="rounded-circle mb-3"
                         style="width: 120px; height: 120px; object-fit: cover; border: 4px solid #42E695;">
                    <h4 style="color: #0B2E3D;">@tutor.Name @tutor.Surname</h4>

                    <div class="mb-3">
                        @foreach (var subject in tutor.Subjects)
                        {
                            <span class="badge me-1" style="background-color: #3BB2B8;">@subject</span>
                        }
                    </div>

                    <p class="text-muted">@tutor.Bio</p>

                    <h6 class="mt-4" style="color: #0B2E3D;">Teaches These Modules:</h6>
                    <div class="d-flex flex-wrap gap-2 justify-content-center">
                        @if (tutor.Modules != null && tutor.Modules.Any())
                        {
                            foreach (var module in tutor.Modules)
                            {
                                <span class="badge" style="background-color: #0B2E3D; color: white;">@module.Name</span>
                            }
                        }
                        else
                        {
                            <span class="text-muted">No modules assigned yet</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Booking Form -->
        <div class="col-md-8">
            <div class="card border-0 shadow-sm">
                <div style="height: 8px; background: linear-gradient(90deg, #42E695, #3BB2B8);"></div>
                <div class="card-body">
                    <h4 style="color: #0B2E3D;" class="mb-4">Book Your Session</h4>

                    <form asp-action="Create" asp-route-tutorId="@tutor.TutorId" method="post" id="bookingForm">
                        <input type="hidden" asp-for="TutorId" />
                        <input type="hidden" asp-for="StudentId" />

                        <!-- Module Selection -->
                        <div class="mb-3">
                            <label asp-for="ModuleId" class="form-label" style="color: #0B2E3D;">Select Module</label>

                            @{
                                // Safely check if ViewBag.Modules exists and has items
                                var modulesList = ViewBag.Modules as SelectList;
                                var hasModules = modulesList != null && modulesList.Any();
                            }

                            @if (hasModules)
                            {
                                <select asp-for="ModuleId" asp-items="modulesList" class="form-select" required>
                                    <option value="">-- Select Module --</option>
                                </select>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    No modules available for selection.
                                </div>
                                <select class="form-select" disabled>
                                    <option>No modules available</option>
                                </select>
                            }

                            <span asp-validation-for="ModuleId" class="text-danger"></span>
                        </div>

                        <!-- Date Selection -->
                        <div class="mb-3">
                            <label asp-for="SelectedDate" class="form-label" style="color: #0B2E3D;">Select Date</label>
                            <input type="date" asp-for="SelectedDate" class="form-control"
                                   min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")"
                                   id="selectedDate" required />
                            <span asp-validation-for="SelectedDate" class="text-danger"></span>
                        </div>

                        <!-- Time Slots (Will be populated via AJAX) -->
                        <div class="mb-3">
                            <label class="form-label" style="color: #0B2E3D;">Available Time Slots</label>
                            <div id="timeSlotsContainer" class="d-flex flex-wrap gap-2">
                                <p class="text-muted">Select a date to see available time slots</p>
                            </div>
                            <input type="hidden" asp-for="StartTime" id="selectedStartTime" />
                            <input type="hidden" asp-for="EndTime" id="selectedEndTime" />
                            <span id="timeSlotError" class="text-danger"></span>
                        </div>

                        <!-- Notes -->
                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label" style="color: #0B2E3D;">Additional Notes (Optional)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"
                                      placeholder="Any specific topics you want to cover..."></textarea>
                        </div>

                        <button type="submit" class="btn w-100"
                                style="background-color: #42E695; color: #0B2E3D; font-weight: bold; border-radius: 30px;"
                                id="submitButton" disabled>
                            Confirm Booking
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let selectedSlot = null;

            // When date changes, fetch available time slots
            $('#selectedDate').change(function () {
                const selectedDate = $(this).val();
                const tutorId = @tutor.TutorId;

                if (selectedDate) {
                    fetchTimeSlots(tutorId, selectedDate);
                }
            });

            function fetchTimeSlots(tutorId, date) {
                $('#timeSlotsContainer').html('<div class="text-center"><div class="spinner-border text-primary" role="status"></div><p>Loading available slots...</p></div>');

                $.get(`/Booking/Availability/${tutorId}?date=${date}`, function (slots) {
                    displayTimeSlots(slots);
                }).fail(function () {
                    $('#timeSlotsContainer').html('<p class="text-danger">Error loading time slots. Please try again.</p>');
                });
            }

                    function displayTimeSlots(slots) {
            const container = $('#timeSlotsContainer');
            container.empty();

            if (slots.length === 0) {
                container.html('<p class="text-muted">No available time slots for this date.</p>');
                return;
            }

            slots.forEach(slot => {
                // FIX: Use slot.start and slot.end (matching API property names)
                // instead of slot.startTime and slot.endTime
                const startTime = new Date(slot.start);
                const endTime = new Date(slot.end);

                // Check if dates are valid
                if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
                    console.error('Invalid date format:', slot);
                    return;
                }

                const startTimeFormatted = startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const endTimeFormatted = endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const button = $(`
                    <button type="button" class="btn time-slot-btn ${slot.available ? 'btn-outline-primary' : 'btn-outline-danger'}"
                            ${!slot.available ? 'disabled' : ''}
                            data-start="${slot.start}"
                            data-end="${slot.end}">
                        ${startTimeFormatted} - ${endTimeFormatted}
                        ${!slot.available ? ' (Booked)' : ''}
                    </button>
                `);

                if (slot.available) {
                    button.click(function () {
                        // Remove previous selection
                        $('.time-slot-btn').removeClass('btn-primary').addClass('btn-outline-primary');

                        // Select this slot
                        $(this).removeClass('btn-outline-primary').addClass('btn-primary');

                        // Store selected times
                        selectedSlot = {
                            start: $(this).data('start'),
                            end: $(this).data('end')
                        };

                        // Enable submit button
                        $('#submitButton').prop('disabled', false);
                        $('#timeSlotError').text('');
                    });
                }

                container.append(button);
            });
        }
            

            // Form submission
            $('#bookingForm').submit(function (e) {
                if (!selectedSlot) {
                    e.preventDefault();
                    $('#timeSlotError').text('Please select a time slot.');
                    return false;
                }

                // Set the hidden time fields
                $('#selectedStartTime').val(selectedSlot.start);
                $('#selectedEndTime').val(selectedSlot.end);
            });
        });
    </script>

    <style>
        .time-slot-btn {
            border-radius: 20px;
            padding: 8px 16px;
            margin: 4px;
            transition: all 0.2s;
        }

            .time-slot-btn:hover:not(:disabled) {
                transform: translateY(-2px);
            }

            .time-slot-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }
    </style>
}