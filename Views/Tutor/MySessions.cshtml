@model List<TutorConnect.WebApp.Models.BookingDTO>
@{
    ViewData["Title"] = "My Sessions";

    var pendingBookings = Model?.Count(b => b.Status == "Pending") ?? 0;
    var upcomingSessions = Model?.Where(b => b.Status == "Accepted" && b.StartTime >= DateTime.Now)
                               .OrderBy(b => b.StartTime)
                               .ToList() ?? new List<BookingDTO>();
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #0B2E3D;">My Sessions</h2>
        <div>
            <span class="badge bg-warning me-2">Pending: @pendingBookings</span>
            <span class="badge bg-primary">Upcoming: @upcomingSessions.Count</span>
        </div>
    </div>

    <!-- Filter Tabs -->
    <ul class="nav nav-tabs mb-4" id="sessionsTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">
                All Sessions (@Model?.Count)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab">
                Pending (@pendingBookings)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="upcoming-tab" data-bs-toggle="tab" data-bs-target="#upcoming" type="button" role="tab">
                Upcoming (@upcomingSessions.Count)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="completed-tab" data-bs-toggle="tab" data-bs-target="#completed" type="button" role="tab">
                Completed (@(Model?.Count(b => b.Status == "Completed") ?? 0))
            </button>
        </li>
    </ul>

    @if (Model == null || !Model.Any())
    {
        <div class="card border-0 shadow-sm text-center py-5">
            <div style="height: 8px; background: linear-gradient(90deg, #42E695, #3BB2B8);"></div>
            <div class="card-body">
                <i class="fas fa-calendar-times" style="font-size: 3rem; color: #3BB2B8;"></i>
                <h4 class="mt-3" style="color: #0B2E3D;">No Sessions Yet</h4>
                <p class="text-muted">You haven't received any booking requests yet.</p>
            </div>
        </div>
    }
    else
    {
        <div class="tab-content" id="sessionsTabContent">
            <!-- All Sessions Tab -->
            <div class="tab-pane fade show active" id="all" role="tabpanel">
                @await Html.PartialAsync("_SessionsList", Model.OrderByDescending(b => b.StartTime))
            </div>

            <!-- Pending Tab -->
            <div class="tab-pane fade" id="pending" role="tabpanel">
                @await Html.PartialAsync("_SessionsList", Model.Where(b => b.Status == "Pending").OrderByDescending(b => b.StartTime))
            </div>

            <!-- Upcoming Tab -->
            <div class="tab-pane fade" id="upcoming" role="tabpanel">
                @await Html.PartialAsync("_SessionsList", upcomingSessions)
            </div>

            <!-- Completed Tab -->
            <div class="tab-pane fade" id="completed" role="tabpanel">
                @await Html.PartialAsync("_SessionsList", Model.Where(b => b.Status == "Completed").OrderByDescending(b => b.StartTime))
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Initialize Bootstrap tabs
        const triggerTabList = document.querySelectorAll('#sessionsTab button')
        triggerTabList.forEach(triggerEl => {
            new bootstrap.Tab(triggerEl)
        })

        // Auto-refresh every 30 seconds
        setInterval(() => {
            location.reload();
        }, 30000);
    </script>
}

<style>
    .nav-tabs .nav-link {
        color: #0B2E3D;
        border: none;
        padding: 12px 20px;
    }

        .nav-tabs .nav-link.active {
            color: #42E695;
            border-bottom: 3px solid #42E695;
            background: transparent;
        }

    .session-card {
        border-left: 4px solid;
        transition: all 0.3s;
    }

    .session-card-pending {
        border-left-color: #ffc107;
    }

    .session-card-accepted {
        border-left-color: #0d6efd;
    }

    .session-card-declined {
        border-left-color: #dc3545;
    }

    .session-card-completed {
        border-left-color: #198754;
    }

    .session-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
</style>