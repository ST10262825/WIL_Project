@model List<TutorConnect.WebApp.Models.BookingDTO>
@{
    ViewData["Title"] = "Student Dashboard";

    var student = ViewBag.Student as TutorConnect.WebApp.Models.StudentDTO;
    var upcomingSessions = ViewBag.UpcomingSessions as List<TutorConnect.WebApp.Models.BookingDTO> ?? new List<TutorConnect.WebApp.Models.BookingDTO>();

    int upcomingCount = ViewBag.UpcomingSessionsCount ?? 0;
    int totalHours = ViewBag.TotalHours ?? 0;
    int completedCount = ViewBag.CompletedCount ?? 0;
    int activeTutors = ViewBag.ActiveTutors ?? 0;
    int pendingCount = ViewBag.PendingCount ?? 0;
    int unreadMessages = ViewBag.UnreadMessagesCount ?? 0;
    int coursesEnrolled = 5;
}

<div class="container my-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="sidebar">
                <div class="p-4 text-center">
                    <div class="image-upload position-relative">
                        <img src="@Url.Content(student?.ProfileImage ?? "~/images/default-profile.png")?v=@Guid.NewGuid().ToString("N")"
                             alt="Profile"
                             class="profile-image"
                             id="profileImage"
                             onerror="this.src='@Url.Content("~/images/default-profile.png")'">
                        <div class="upload-overlay" data-bs-toggle="modal" data-bs-target="#profileModal">
                            <i class="fas fa-camera"></i>
                        </div>
                    </div>
                    <h5 class="mt-3 mb-1">@(student?.Name ?? "Student")</h5>
                    <p class="text-muted mb-0">@(student?.Bio ?? "Computer Science Student")</p>
                    <small class="text-primary" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#profileModal">
                        <i class="fas fa-edit me-1"></i>Edit Profile
                    </small>
                </div>
                <ul class="sidebar-menu">
                    <li>
                        <a href="@Url.Action("Dashboard", "Student")" class="active">
                            <i class="fas fa-tachometer-alt"></i> Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="@Url.Action("Browse", "Tutor")">
                            <i class="fas fa-search"></i> Find Tutors
                        </a>
                    </li>
                    <li>
                        <a href="@Url.Action("MySessions", "Student")">
                            <i class="fas fa-calendar-alt"></i> My Sessions
                            @if (pendingCount > 0)
                            {
                                <span class="badge bg-danger rounded-pill ms-auto">@pendingCount</span>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-chalkboard-teacher"></i> My Tutors
                            <span class="badge bg-primary rounded-pill ms-auto">@activeTutors</span>
                        </a>
                    </li>
                    <li>
                        <a href="@Url.Action("Chat", "Tutor")">
                            <i class="fas fa-comment-dots"></i> Messages
                            @if (unreadMessages > 0)
                            {
                                <span class="badge bg-danger rounded-pill ms-auto">@unreadMessages</span>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-book"></i> Learning Materials
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-cog"></i> Settings
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="col-lg-9">
            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="profile-info">
                        <h4>Welcome back, @(student?.Name ?? "Student")! 👋</h4>
                        <p class="text-muted mb-0">Ready to continue your learning journey? Here's what's happening with your studies.</p>
                    </div>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3 mb-3">
                    <div class="stats-card h-100">
                        <div class="stats-icon" style="background-color: #e3f2fd; color: #1976d2;">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <h3 class="mb-0 fw-bold">@upcomingCount</h3>
                        <p class="text-muted mb-0">Upcoming Sessions</p>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stats-card h-100">
                        <div class="stats-icon" style="background-color: #fff8e1; color: #ffa000;">
                            <i class="fas fa-clock"></i>
                        </div>
                        <h3 class="mb-0 fw-bold">@totalHours</h3>
                        <p class="text-muted mb-0">Learning Hours</p>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stats-card h-100">
                        <div class="stats-icon" style="background-color: #e8f5e9; color: #388e3c;">
                            <i class="fas fa-graduation-cap"></i>
                        </div>
                        <h3 class="mb-0 fw-bold">@coursesEnrolled</h3>
                        <p class="text-muted mb-0">Courses</p>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stats-card h-100">
                        <div class="stats-icon" style="background-color: #ffebee; color: #c62828;">
                            <i class="fas fa-chalkboard-teacher"></i>
                        </div>
                        <h3 class="mb-0 fw-bold">@activeTutors</h3>
                        <p class="text-muted mb-0">Active Tutors</p>
                    </div>
                </div>
            </div>

            <!-- Main Content Grid -->
            <div class="row">
                <!-- Upcoming Sessions -->
                <div class="col-md-8 mb-4">
                    <div class="dashboard-card h-100">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h5 class="mb-0"><i class="fas fa-calendar-check me-2" style="color: #42E695;"></i> Upcoming Sessions</h5>
                            <a href="@Url.Action("MySessions", "Student")" class="btn btn-sm btn-outline-primary">View All</a>
                        </div>

                        @if (!upcomingSessions.Any())
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-calendar-times text-muted" style="font-size: 3rem; opacity: 0.3;"></i>
                                <p class="text-muted mt-3 mb-2">No upcoming sessions scheduled.</p>
                                <a href="@Url.Action("Browse", "Tutor")" class="btn btn-primary btn-sm">
                                    <i class="fas fa-search me-1"></i>Find Tutors
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                @foreach (var session in upcomingSessions.Take(4))
                                {
                                    <div class="col-md-6 mb-3">
                                        <div class="session-card h-100">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div>
                                                    <h6 class="mb-1 fw-bold">@session.ModuleName</h6>
                                                    <p class="text-muted mb-1 small">With @session.TutorName</p>
                                                </div>
                                                <span class="badge @GetStatusBadgeClass(session.Status)">@session.Status</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <span class="badge @(session.StartTime.Date == DateTime.Today ? "bg-success" : "bg-secondary")">
                                                    @(session.StartTime.Date == DateTime.Today ? "Today" : session.StartTime.ToString("MMM dd"))
                                                </span>
                                                <small class="text-muted">@session.StartTime.ToString("h:mm tt")</small>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <a href="@Url.Action("Chat", "Tutor", new { tutorId = session.TutorId })" class="btn btn-sm btn-outline-primary w-100">
                                                    <i class="fas fa-comment me-1"></i> Message
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Progress Section -->
                <div class="col-md-4 mb-4">
                    <div class="dashboard-card h-100">
                        <h5><i class="fas fa-chart-line me-2" style="color: #FF7E36;"></i> Learning Progress</h5>

                        @if (Model != null && Model.Any(b => b.Status == "Completed"))
                        {
                            var completedSessions = Model.Where(b => b.Status == "Completed").ToList();
                            var modules = completedSessions.GroupBy(b => b.ModuleName);

                            foreach (var module in modules.Take(2))
                            {
                                var moduleSessions = completedSessions.Count(b => b.ModuleName == module.Key);
                                var totalModuleSessions = Model.Count(b => b.ModuleName == module.Key);
                                var percentage = totalModuleSessions > 0 ? (moduleSessions * 100) / totalModuleSessions : 0;

                                <div class="progress-item mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="fw-medium">@module.Key</span>
                                        <span class="text-primary fw-bold">@percentage%</span>
                                    </div>
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar" role="progressbar" style="width: @percentage%; background-color: #42E695;"></div>
                                    </div>
                                    <small class="text-muted">@moduleSessions/@totalModuleSessions sessions completed</small>
                                </div>
                            }

                            <div class="text-center mt-4">
                                <a href="@Url.Action("MySessions", "Student")" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-list me-1"></i> View Progress Details
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-chart-line text-muted" style="font-size: 2.5rem; opacity: 0.3;"></i>
                                <p class="text-muted mt-3 mb-0">Start learning to see your progress!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Profile Edit Modal -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="UpdateProfile" method="post" enctype="multipart/form-data" id="profileForm">
                <input type="hidden" name="studentId" value="@student?.StudentId" />

                <div class="text-center mb-4">
                    <div class="image-upload position-relative mx-auto" style="width: 120px;">
                        <img src="@Url.Content(student?.ProfileImage ?? "~/images/default-profile.png")?v=@Guid.NewGuid().ToString("N")"
                             alt="Profile"
                             class="profile-image"
                             id="modalProfileImage"
                             style="width: 120px; height: 120px;"
                             onerror="this.src='@Url.Content("~/images/default-profile.png")'">
                        <div class="upload-overlay" style="width: 30px; height: 30px;">
                            <i class="fas fa-camera"></i>
                        </div>
                        <input type="file" name="profileImage" id="profileImageInput" accept="image/*" class="d-none" onchange="previewImage(this)">
                    </div>
                    <small class="text-muted">Click camera icon to change photo</small>
                </div>

                <div class="mb-3">
                    <label class="form-label">Bio</label>
                    <textarea name="bio" class="form-control" rows="3" placeholder="Tell us about yourself...">@student?.Bio</textarea>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        function previewImage(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('modalProfileImage').src = e.target.result;
                    // Don't update the main image yet, only after successful save
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        // Auto-click file input when overlay is clicked
        document.querySelectorAll('.upload-overlay').forEach(overlay => {
            overlay.addEventListener('click', function() {
                document.getElementById('profileImageInput').click();
            });
        });

        // Handle form submission with AJAX
        document.querySelector('#profileModal form').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;

            try {
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Update the main profile image with cache busting
                    if (result.profileImageUrl) {
                        const timestamp = new Date().getTime();
                        const mainImage = document.getElementById('profileImage');
                        const modalImage = document.getElementById('modalProfileImage');

                        mainImage.src = result.profileImageUrl + '?v=' + timestamp;
                        modalImage.src = result.profileImageUrl + '?v=' + timestamp;
                    }

                    // Update bio if it exists
                    if (result.bio) {
                        const bioElement = document.querySelector('.profile-info p');
                        if (bioElement) {
                            bioElement.textContent = result.bio;
                        }
                    }

                    // Show success message
                    showNotification('Profile updated successfully!', 'success');

                    // Close modal after a brief delay
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
                        modal.hide();
                    }, 1500);

                } else {
                    showNotification(result.message || 'Failed to update profile', 'error');
                }
            } catch (error) {
                showNotification('Error updating profile: ' + error.message, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
        });

        // Show notification function
        function showNotification(message, type) {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.custom-notification');
            existingNotifications.forEach(notif => notif.remove());

            const notification = document.createElement('div');
            notification.className = `custom-notification alert alert-${type === 'success' ? 'success' : 'danger'}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                animation: slideIn 0.3s ease;
            `;
            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
                    ${message}
                </div>
            `;

            document.body.appendChild(notification);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }

        // Add CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @@keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            .custom-notification {
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                border: none;
                border-radius: 8px;
            }
        `;
        document.head.appendChild(style);

        // Reset form when modal is closed
        document.getElementById('profileModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('profileModal form').reset();
        });

        // Auto-refresh every 30 seconds (optional)
        setInterval(() => {
            location.reload();
        }, 30000);
    </script>
}

<style>
    .sidebar {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
        position: sticky;
        top: 20px;
    }

    .sidebar-menu {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .sidebar-menu li {
            border-bottom: 1px solid #f1f1f1;
        }

            .sidebar-menu li:last-child {
                border-bottom: none;
            }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: #555;
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover {
                background-color: #f8f9fa;
                color: #3BB2B8;
            }

            .sidebar-menu a.active {
                background-color: #e8f5fe;
                color: #3BB2B8;
                font-weight: 500;
                border-left: 4px solid #3BB2B8;
            }

        .sidebar-menu i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

    .profile-image {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        border: 4px solid #42E695;
        object-fit: cover;
    }

    .dashboard-header {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
        padding: 25px;
        margin-bottom: 20px;
    }

    .stats-card {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
        transition: all 0.3s;
        text-align: center;
        border: 1px solid #f1f1f1;
    }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

    .stats-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        margin: 0 auto 15px auto;
    }

    .dashboard-card {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
        border: 1px solid #f1f1f1;
    }

    .session-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        border-left: 4px solid #42E695;
        transition: all 0.3s;
    }

        .session-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

    .progress-item {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
    }

    .activity-item {
        background: #f8f9fa;
        border-radius: 8px;
        transition: all 0.3s;
    }

        .activity-item:hover {
            background: #e9ecef;
        }

    .activity-icon {
        width: 40px;
        height: 40px;
        background: white;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
    }

    .image-upload {
        position: relative;
        display: inline-block;
    }

    .upload-overlay {
        position: absolute;
        bottom: 5px;
        right: 5px;
        background-color: #3BB2B8;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        cursor: pointer;
        transition: all 0.3s;
    }

        .upload-overlay:hover {
            background-color: #2a8d92;
            transform: scale(1.1);
        }
</style>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Accepted" => "bg-primary",
            "Declined" => "bg-danger",
            "Completed" => "bg-success",
            _ => "bg-secondary"
        };
    }
}