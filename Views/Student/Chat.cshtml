@page
@using TutorConnect.WebApp.Models
@inject IHttpContextAccessor HttpContextAccessor

<h2>Real-Time Chat</h2>

<div>
    <label>Select User:</label>
    <select id="chatUserSelect"></select>
</div>

<div id="chatWindow" style="border:1px solid #ccc; height:400px; overflow-y:scroll; padding:10px; margin-top:10px;"></div>

<div style="margin-top:10px;">
    <input type="text" id="chatMessage" style="width:70%;" placeholder="Type a message..." />
    <button id="sendBtn">Send</button>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let currentUserId = @User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
        let authToken = '@HttpContextAccessor.HttpContext.Session.GetString("AuthToken")';
        let selectedReceiverId = null;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub", { accessTokenFactory: () => authToken })
            .build();

        connection.on("ReceiveMessage", (senderId, message, sentAt) => {
            appendMessage(senderId, message, sentAt);
        });

        async function sendMessage() {
            if (!selectedReceiverId) {
                alert("Please select a user to chat with.");
                return;
            }
            let message = document.getElementById("chatMessage").value;
            if (!message) return;

            await connection.invoke("SendMessage", parseInt(currentUserId), parseInt(selectedReceiverId), message);
            document.getElementById("chatMessage").value = "";
        }

        function appendMessage(senderId, message, sentAt) {
            let chatWindow = document.getElementById("chatWindow");
            let div = document.createElement("div");
            div.style.marginBottom = "5px";

            let senderName = senderId == currentUserId ? "You" : document.querySelector(`#chatUserSelect option[value='${senderId}']`)?.text;
            div.textContent = `${senderName}: ${message} (${new Date(sentAt).toLocaleTimeString()})`;
            chatWindow.appendChild(div);
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        async function loadUsers() {
            const response = await fetch("/api/chat/users", {
                headers: { "Authorization": `Bearer ${authToken}` }
            });
            const users = await response.json();
            const select = document.getElementById("chatUserSelect");
            users.forEach(u => {
                if (u.userId != currentUserId) {
                    let option = document.createElement("option");
                    option.value = u.userId;
                    option.text = u.name;
                    select.add(option);
                }
            });
            select.addEventListener("change", async () => {
                selectedReceiverId = select.value;
                await loadMessages(selectedReceiverId);
            });
        }

        async function loadMessages(receiverId) {
            const response = await fetch(`/api/chat/messages/${receiverId}`, {
                headers: { "Authorization": `Bearer ${authToken}` }
            });
            const messages = await response.json();
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.innerHTML = "";
            messages.forEach(m => appendMessage(m.senderId, m.message, m.sentAt));
        }

        connection.start().catch(err => console.error(err.toString()));
        document.getElementById("sendBtn").addEventListener("click", sendMessage);

        // Load chat users on page load
        loadUsers();
    </script>
}
