@model List<TutorConnect.WebApp.Models.BookingDTO>
@{
    ViewData["Title"] = "My Bookings";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #0B2E3D;">My Bookings</h2>
        <a href="/Tutor/Browse" class="btn" style="background-color: #42E695; color: #0B2E3D; border-radius: 30px;">
            <i class="fas fa-plus me-2"></i>Book New Session
        </a>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="card border-0 shadow-sm text-center py-5">
            <div style="height: 8px; background: linear-gradient(90deg, #42E695, #3BB2B8);"></div>
            <div class="card-body">
                <i class="fas fa-calendar-xmark" style="font-size: 3rem; color: #3BB2B8;"></i>
                <h4 class="mt-3" style="color: #0B2E3D;">No Bookings Yet</h4>
                <p class="text-muted">You haven't made any bookings yet. Book your first session with a tutor!</p>
                <a href="/Tutor/Browse" class="btn" style="background-color: #0B2E3D; color: white; border-radius: 30px;">
                    Browse Tutors
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var item in Model.OrderByDescending(b => b.StartTime))
            {
                var booking = item; 

                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 border-0 shadow-sm">
                        <div style="height: 8px; background: linear-gradient(90deg, #42E695, #3BB2B8);"></div>
                        <div class="card-body">
                            <!-- Status Badge -->
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="badge @GetStatusBadgeClass(booking.Status)">
                                    @booking.Status
                                </span>
                                <small class="text-muted">#@booking.BookingId</small>
                            </div>

                            <!-- Tutor Info -->
                            <div class="d-flex align-items-center mb-3">
                                <div class="flex-shrink-0">
                                    <div class="rounded-circle d-flex align-items-center justify-content-center"
                                         style="width: 50px; height: 50px; background-color: #3BB2B8; color: white;">
                                        <i class="fas fa-user-graduate"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h6 class="mb-0" style="color: #0B2E3D;">@booking.TutorName</h6>
                                    <small class="text-muted">Tutor</small>
                                </div>
                            </div>

                            <!-- Booking Details -->
                            <div class="booking-details">
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="text-muted">Module:</span>
                                    <strong style="color: #0B2E3D;">@booking.ModuleName</strong>
                                </div>

                                <div class="d-flex justify-content-between mb-2">
                                    <span class="text-muted">Date:</span>
                                    <strong>@booking.StartTime.ToString("MMM dd, yyyy")</strong>
                                </div>

                                <div class="d-flex justify-content-between mb-2">
                                    <span class="text-muted">Time:</span>
                                    <strong>@booking.StartTime.ToString("hh:mm tt") - @booking.EndTime.ToString("h:mm tt")</strong>
                                </div>

                                @if (!string.IsNullOrEmpty(booking.Notes))
                                {
                                    <div class="mt-3">
                                        <small class="text-muted">Notes:</small>
                                        <p class="mb-0 small">@booking.Notes</p>
                                    </div>
                                }
                            </div>

                            <!-- Actions -->
                            <div class="mt-3 pt-3 border-top">
                                @if (booking.Status == "Pending")
                                {
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-outline-danger w-100"
                                                onclick="cancelBooking(@booking.BookingId)">
                                            <i class="fas fa-times me-1"></i>Cancel
                                        </button>
                                    </div>
                                }
                                else if (booking.Status == "Accepted")
                                {
                                    <div class="text-center">
                                        <span class="badge bg-success">
                                            <i class="fas fa-check me-1"></i>Confirmed
                                        </span>
                                        <small class="d-block text-muted mt-1">Session is confirmed</small>
                                    </div>
                                }
                                else if (booking.Status == "Completed")
                                {
                                    <div class="text-center">
                                        <span class="badge bg-info">
                                            <i class="fas fa-check-circle me-1"></i>Completed
                                        </span>
                                        <small class="d-block text-muted mt-1">Session completed</small>

                                        <!-- Review Button - Only show if not reviewed -->
                                        @if (!item.HasBeenReviewed)
                                        {
                                            <button class="btn btn-warning btn-sm mt-2 review-tutor-btn"
                                                    data-booking-id="@item.BookingId"
                                                    data-tutor-name="@item.TutorName"
                                                    data-tutor-id="@item.TutorId">
                                                <i class="fas fa-star me-1"></i>Review Tutor
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success mt-2">
                                                <i class="fas fa-star me-1"></i>Reviewed
                                            </span>
                                        }

                                    </div>
                                }

                                <!-- Message button for all statuses -->
                                <a href="/Tutor/Chat?tutorId=@booking.TutorId" class="btn btn-outline-secondary btn-sm mt-2 w-100">
                                    <i class="fas fa-comment me-1"></i> Message Tutor
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Review Tutor: <span id="reviewTutorName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <input type="hidden" id="reviewBookingId" name="bookingId" />
                    <input type="hidden" id="reviewTutorId" name="tutorId" />

                    <div class="mb-3">
                        <label class="form-label">Rating</label>
                        <div class="star-rating mb-3">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="fas fa-star star-rating-icon"
                                   data-rating="@i"
                                   style="cursor: pointer; font-size: 1.5rem; color: #ddd;"></i>
                            }
                        </div>
                        <input type="hidden" id="selectedRating" name="rating" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Review Comment (optional)</label>
                        <textarea class="form-control" id="reviewComment" name="comment" rows="3"
                                  placeholder="Share your experience with this tutor..." maxlength="500"></textarea>
                        <small class="text-muted"><span id="charCount">0</span>/500 characters</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit Review</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
               function cancelBooking(bookingId) {
            if (confirm('Are you sure you want to cancel this booking?')) {
                // Show loading state
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cancelling...';
                button.disabled = true;

                fetch(`/Student/CancelBooking?bookingId=${bookingId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        return response.text(); // Get the response as text to check for redirect
                    }
                    throw new Error('Network response was not ok');
                })
                .then(data => {
                    // Check if the response is a redirect
                    if (data.includes('Redirect') || data.includes('window.location')) {
                        // If it's a redirect, follow it
                        window.location.href = '/Student/MySessions';
                    } else {
                        // Otherwise reload the page
                        location.reload();
                    }
                })
                .catch(error => {
                    alert('Error cancelling booking: ' + error);
                    button.innerHTML = originalText;
                    button.disabled = false;
                });
            }
        }

                // Review functionality
        $(document).ready(function () {
            const reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));
            let selectedRating = 0;

            // Star rating functionality
            $('.star-rating-icon').hover(function() {
                const rating = $(this).data('rating');
                $(this).parent().find('.star-rating-icon').each(function() {
                    $(this).css('color', $(this).data('rating') <= rating ? '#FFD700' : '#ddd');
                });
            });

            $('.star-rating-icon').click(function() {
                selectedRating = $(this).data('rating');
                $('#selectedRating').val(selectedRating);
                $(this).parent().find('.star-rating-icon').each(function() {
                    $(this).css('color', $(this).data('rating') <= selectedRating ? '#FFD700' : '#ddd');
                });
            });

            // Character count
            $('#reviewComment').on('input', function() {
                $('#charCount').text($(this).val().length);
            });

            // Open review modal
            $('.review-tutor-btn').click(function() {
                const bookingId = $(this).data('booking-id');
                const tutorName = $(this).data('tutor-name');
                const tutorId = $(this).data('tutor-id');

                $('#reviewBookingId').val(bookingId);
                $('#reviewTutorId').val(tutorId);
                $('#reviewTutorName').text(tutorName);

                // Reset form
                selectedRating = 0;
                $('#selectedRating').val('');
                $('#reviewComment').val('');
                $('#charCount').text('0');
                $('.star-rating-icon').css('color', '#ddd');

                reviewModal.show();
            });

            // Submit review
            $('#submitReviewBtn').click(function() {
                const rating = $('#selectedRating').val();
                const comment = $('#reviewComment').val();
                const bookingId = $('#reviewBookingId').val();

                if (!rating) {
                    alert('Please select a rating before submitting.');
                    return;
                }

                const submitBtn = $(this);
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Submitting...');

                $.ajax({
                    url: '@Url.Action("SubmitReview", "Student")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Content-Type': 'application/json'
                    },
                    data: JSON.stringify({
                        bookingId: parseInt(bookingId),
                        rating: parseInt(rating),
                        comment: comment
                    }),
                    success: function(response) {
                        if (response.success) {
                            reviewModal.hide();

                            // Replace the review button with "Reviewed" badge instantly
                            const button = $('.review-tutor-btn[data-booking-id="' + bookingId + '"]');
                            button.replaceWith('<span class="badge bg-success mt-2"><i class="fas fa-star me-1"></i>Reviewed</span>');

                            alert('Review submitted successfully!');
                        } else {
                            alert(response.message);
                            submitBtn.prop('disabled', false).html('Submit Review');
                        }
                    },
                    error: function() {
                        alert('Error submitting review. Please try again.');
                        submitBtn.prop('disabled', false).html('Submit Review');
                    }
                });
            });
        });

    </script>

    <style>
        .star-rating {
            display: flex;
            gap: 5px;
        }

        .star-rating-icon {
            transition: all 0.2s ease;
        }

            .star-rating-icon:hover {
                transform: scale(1.2);
            }

        .review-tutor-btn {
            background-color: #FFD700;
            color: #000;
            border: none;
            transition: all 0.3s;
        }

            .review-tutor-btn:hover {
                background-color: #FFC107;
                transform: translateY(-2px);
            }
    </style>
}

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Accepted" => "bg-success",
            "Declined" => "bg-danger",
            "Completed" => "bg-info",
            _ => "bg-secondary"
        };
    }
}